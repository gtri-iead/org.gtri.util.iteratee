/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.gtri.util.iteratee.api;

import scala.collection.immutable.Traversable;

/**
 * An interface for a Moore machine. A Moore machine is a finite state machine 
 * whose output is determined solely by its current state. 
 * 
 * @author lance.gatlin@gmail.com
 * @param <O> the output type
 * @param <E> the enumerator state type
 */
public interface Enumerator<O,E> {
  /**
   * An interface for an immutable state of a Moore machine. A buffer of output 
   * items is generated by an Enumerator with each successive call to its step 
   * method. An Enumerator signals completion (or the presence of errors) by way 
   * of the status method. Further calls to the step method after an Enumerator's 
   * status method has indicated completion are a noop. 
   * 
   * Note1: Enumerator implementations should not throw exceptions. Instead,
   * exceptions should be returned as issues in the result and the 
   * status of the next Enumerator set to FATAL_ERROR (should processing stop) or 
   * RECOVERABLE_ERROR (if processing may continue).
   * 
   * @author lance.gatlin@gmail.com
   * @param <O> the output type
   * @param <E> the most derived type of the Enumerator
   */
  public static interface State<O,E> {
    /**
     * Get the status of the Enumerator
     * @return status of the Enumerator
     */
    StatusCode status();

    /**
     * The immutable result of incrementing an Enumerator
     * 
   * @param <O> the output type
   * @param <E> the most derived type of the Enumerator
     */  
    public interface Result<O,E> {
      /**
       * Get the next immutable state of the Enumerator
       * @return the next immutable state of the Enumerator
       */
      E next();
      /**
       * Get the buffer of output items
       * @return the buffer of output items
       */
      Traversable<O> output();
      /**
       * Get any issues raised during processing
       * @return any issues raised during processing
       */
      Traversable<Issue> issues();
    }

    /**
     * Increment the Enumerator
     * @return an immutable result object
     */  
    Result<O,E> step();
  }
  
  E initialState();
}
